apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'com.jakewharton.hugo'

def loadProperty(name, defaultValue = "") {
    hasProperty(name) ? "${getProperty(name)}" : defaultValue
}

buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'com.github.jcandksolutions.gradle:android-unit-test:2.1.1'
        classpath 'io.fabric.tools:gradle:1.+'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.4'
        classpath 'com.jakewharton.hugo:hugo-plugin:1.2.0'
    }
}

repositories {
    maven { url 'https://maven.fabric.io/public' }
    maven { url 'https://raw.github.com/Raizlabs/maven-releases/master/releases' }
}

android {
    compileSdkVersion 21
    buildToolsVersion "21.1.2"

    defaultConfig {
        applicationId "com.nispok.fitcoach"
        minSdkVersion 14
        targetSdkVersion 21
        versionCode 1
        versionName "1.0"
    }

    signingConfigs {
        release {
            storeFile file(loadProperty("NISPOK_RELEASE_KEYSTORE_PATH") ?: signingConfigs.debug.storeFile)
            storePassword loadProperty("NISPOK_RELEASE_PASSWORD") ?: signingConfigs.debug.storePassword
            keyAlias loadProperty("NISPOK_RELEASE_KEY_ALIAS") ?: signingConfigs.debug.keyAlias
            keyPassword loadProperty("NISPOK_RELEASE_KEY_PASSWORD") ?: signingConfigs.debug.keyPassword
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    applicationVariants.all { variant ->
        // add a generated crashlytics properties file with an API key
        createCrashlyticsProperties(project, variant)
    }
}

def createCrashlyticsProperties(Project project, variant) {
    // Valid key of non-existing organization on Crashlytics to make local building possible
    def crashlyticsKey = loadProperty("FITCOACH_CRASHLYTICS_API_KEY", "b246d46ecb3f6b64f3ce24c0c2055cc4fd101c93")

    File fabricProperties = new File("${project.projectDir.absolutePath}/crashlytics.properties")
    def variantSuffix = variant.name.capitalize()
    def generateResourcesTask = project.tasks.getByName("fabricGenerateResources${variantSuffix}")
    def generatePropertiesTask = task("fabricGenerateProperties${variantSuffix}") << {
        Properties properties = new Properties()
        println "...copying apiKey for ${variant.name}"
        properties.put("apiKey", crashlyticsKey.toString())
        properties.store(new FileWriter(fabricProperties), "")
    }
    generateResourcesTask.dependsOn generatePropertiesTask
    def assembleTask = project.tasks.getByName("assemble${variantSuffix}")
    assembleTask.doLast {
        println "...removing crashlytics.properties"
        fabricProperties.delete()
    }
}

def dbFlowVersion = "1.5.1"

dependencies {
    compile project(':floatingactionbutton')
    compile 'com.android.support:appcompat-v7:21.0.3'
    compile 'com.android.support:cardview-v7:21.0.3'
    compile 'com.android.support:recyclerview-v7:21.0.3'
    compile 'com.google.android.gms:play-services-fitness:6.5.87'
    compile('com.crashlytics.sdk.android:crashlytics:2.2.1@aar') {
        transitive = true;
    }
    apt "com.raizlabs.android:DBFlow-Compiler:${dbFlowVersion}"
    compile "com.raizlabs.android:DBFlow-Core:${dbFlowVersion}"
    compile "com.raizlabs.android:DBFlow:${dbFlowVersion}"
}

apply plugin: 'android-unit-test'

androidUnitTest {
    sourceSets {
        test {
            resources.srcDirs = ['src/test/res']
        }
    }
}

dependencies {
    testCompile 'junit:junit:4.12'
    testCompile 'org.robolectric:robolectric:2.4'
}
